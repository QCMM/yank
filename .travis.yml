language: c
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
      - g++
      - gfortran
      - valgrind
      - csh
      - g++-multilib
      - gcc-multilib

branches:
  only:
    - master

install:
  - source devtools/travis-ci/install.sh
  - export PYTHONUNBUFFERED=true
  # Add org channel
  - conda config --add channels omnia --add channels conda-forge
  # Add omnia dev channels if requested
  - if [ $DEVOMNIA ]; then conda config --add channels omnia-dev; fi
  # Update everything
  - conda update --quiet --yes --all
  # Unpack encrypted OpenEye license file
  - if [ "$TRAVIS_SECURE_ENV_VARS" == true ]; then openssl aes-256-cbc -K $encrypted_348f443ff0b5_key -iv $encrypted_348f443ff0b5_iv -in "devtools/travis-ci/oe_license.txt.enc" -out "$OE_LICENSE" -d; fi
  - if [ "$TRAVIS_SECURE_ENV_VARS" == false ]; then echo "OpenEye license will not be installed in forks."; fi

script:
  # Create a test environment
  - conda create --quiet --yes -n test python=$python conda-build conda-verify jinja2 pip nose nose-timer coverage modeller
  # Activate the test environment
  - source activate test
  # Install OpenEye toolkit
  - pip install $OPENEYE_CHANNEL openeye-toolkits && python -c "import openeye; print(openeye.__version__)"
  # Build the recipe
  - conda build devtools/conda-recipe
  # Install the package
  - conda install -c $HOME/miniconda/envs/test/conda-bld/ --quiet --yes --use-local ${PACKAGENAME}-dev
  # Test the package
  - cd devtools && nosetests $PACKAGENAME --with-coverage --nocapture --verbosity=2 --with-timer -a '!slow' && cd .. && if [[ $CONDA_PY = 3.6 ]]; then devtools/travis-ci/build_docs.sh; fi

env:
  matrix:
    - python=3.6 CONDA_PY=3.6
    - python=3.7 CONDA_PY=3.7
    - python=3.7 CONDA_PY=3.7 DEVOMNIA=true

  global:
    - ORGNAME="omnia"
    - PACKAGENAME="yank"
    # OpenEye toolkit
    # The architecture to download for the OpenEye toolkits
    - OE_ARCH="linux-x64"
    - OE_LICENSE="$HOME/oe_license.txt"
    - OPENEYE_CHANNEL="-i https://pypi.anaconda.org/OpenEye/simple/"
    # encrypted BINSTAR_TOKEN for push of dev package to binstar
    - secure: "iGrY1Jrr6ZvxtvjnTBVLFIPQBaalzkZX+DJWFZuk6j8igjDrlEVE2iGmpx5Akb7/H5/rRPI1GcnYy0e2OXSVHyxwcn2I6TXia3g6K95yxH43xOaTEfiFGfxSgP6M5OZSJjlLUmv3cpnJ66r6kYjQgTn9djY2iLsGKkFdR8pn6gQ="
    # encrypted AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. Decrpyts to VARIABLE=KEY
    - secure: "SrSd1JoI8dBXQxDAX0xBTYBinTusRBQoPETnxHrBAgKdoty1pkzaghTKNMsrGsk78iwkkj1hAyttIY9trdFQkmx+OTx0fLKFmDHsMkgko4RzTtrgLgoxuRIs/gruID2cN1XKEbxlhRmQF14+q8/X1q6iGGdYMrxo51JcYPuEOSo="
    - secure: "br6QRMYXhHltYTEh/d+zejxcunT3GsqwQvxxLmqnLxi+LIxX4j7eymR6p4fPBd5mCRxyvkQEjnSZxF6e7JlEKxWVcMG28I/dBWzVIRW3EKQQNRmyI+JL1dfNaqj68kHJD+FknBwHK9LD238JPcyqXPdVrm9iPkDijPczvPBxvDs="
    # encrypted KEY_MODELLER. Decrpyts to VARIABLE=KEY
    - secure: "nwK0HCW61j8WRU5k3hrlsD14vmbbh80ZnvMljdG3ovbJXeL9gu0K25peJrvPJ99DDCEfOcEK1Lq8kYkTqDDX64hQglsHCHAP24h3zdkyXRqguv+1o+Py/O/hZfHcxJLTzknnKPMgRslgTSUnmC3TvF6sJHMdxQwHekPkQSSWHa4="

matrix:
  allow_failures:
  - env: python=3.7 CONDA_PY=3.7 DEVOMNIA=true

deploy:
    - provider: s3
      access_key_id: ${AWS_ACCESS_KEY_ID}
      secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      bucket: "getyank.org"
      skip_cleanup: true
      local_dir: docs/_deploy
      on:
          branch: master
          condition: "$CONDA_PY = 3.7"
